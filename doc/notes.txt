************************************************************************************************************************************************************************************************
m4b to splitted mp3s

ffmpeg -i original.m4b -ss 00:01:00.00 -to 00:02:00.00 -acodec libmp3lame -ab 128k test.mp3
=> ist aber super langsam!!! => 1 Minute in ca. 20 Sekunden ... d.h. 6 Stunden in 2 Stunden ...

************************************************************************************************************************************************************************************************
create for each chapter one mp3 (split into mp3s):
Example:
ffmpeg -i Hell\'s\ Corner_\ Camel\ Club\,\ Book\ 5\ David\ Baldacci.flac -ss 00:01:00.00 -t 00:00:15.99 -acodec libmp3lame -ab 128k some.mp3

def process = [tools.ffmpegExecutable, "-i", sourceAudioFile, "-ss", startPoint, "-t", duration, "-acodec", "libmp3lame", "-ab", "128", destinationAudioFile];
process.execute();

Weitere Infos aus der Docu: (http://ffmpeg.org/ffmpeg.html)

?-t duration (output)?
  Stop writing the output after its duration reaches duration. duration may be a number in seconds, or in hh:mm:ss[.xxx] form.
  -to and -t are mutually exclusive and -t has priority.

?-to position (output)?
  Stop writing the output at position. position may be a number in seconds, or in hh:mm:ss[.xxx] form.
  -to and -t are mutually exclusive and -t has priority.

?-ss position (input/output)?
  When used as an input option (before -i), seeks in this input file to position. Note the in most formats it is not possible to seek exactly, so ffmpeg will seek to the closest seek point before position. When transcoding and ?-accurate_seek? is enabled (the default), this extra segment between the seek point and position will be decoded and discarded. When doing stream copy or when ?-noaccurate_seek? is used, it will be preserved.
  When used as an output option (before an output filename), decodes but discards input until the timestamps reach position.
  position may be either in seconds or in hh:mm:ss[.xxx] form.

Split faster ...
http://stackoverflow.com/questions/5651654/ffmpeg-how-to-split-video-efficiently

echo "Two commands"
  time ffmpeg -v quiet -y -i input.ts -vcodec copy -acodec copy -ss 00:00:00 -t 00:30:00 -sn test1.mkv
  time ffmpeg -v quiet -y -i input.ts -vcodec copy -acodec copy -ss 00:30:00 -t 01:00:00 -sn test2.mkv
echo "One command"
  time ffmpeg -v quiet -y -i input.ts
          -vcodec copy -acodec copy -ss 00:00:00 -t 00:30:00 -sn test3.mkv
          -vcodec copy -acodec copy -ss 00:30:00 -t 01:00:00 -sn test4.mkv
************************************************************************************************************************************************************************************************
concat mp3 and recode to m4a:

ffmpeg -i 01.mp3 -i 02.mp3 -i 03.mp3 -i 04.mp3 -i 05.mp3 -i 06.mp3 -i 07.mp3 -i 08.mp3 -i 09.mp3 -i 10.mp3 -filter_complex '[0:0] [1:0] [2:0] concat=n=10:a=1:v=0 [a]' -map '[a]' -strict -2 test.m4a

Info from : https://trac.ffmpeg.org/wiki/How%20to%20concatenate%20%28join%2C%20merge%29%20media%20files
            https://trac.ffmpeg.org/wiki/How%20to%20concatenate%20(join,%20merge)%20media%20files
************************************************************************************************************************************************************************************************

Parameters calling the converter:

$ java -jar build/libs/audiobooktool-1.1.jar
error: Missing required options: a, m
usage: ConvertTool -a file -m file [-o file]
                   converts an audio file to a ".m4b" audio book and
                   copies all metadata from another file to it.
 -a,--audioFrom <audiofile>   use audiofile as audio source to convert
                              from
 -d,--dryRun                  do not convert, just print what files are
                              affected
 -h,--help                    usage information
 -j,--join                    join many input file to one output files
                              (and create chapter info)
 -m,--metaFrom <audiofile>    use audiofile as meta info source to copy
                              from
 -o,--outputTo <file>         if file is a directory, put the converted
                              file in here, if it' a file name use
                              filename for output (default is base name of
                              metaFrom-file plus .m4b extension)
 -s,--split                   split one input file to many output files
                              (by chapter info)


mergeToM4B
==========

Merging flac+aax -> m4b
--mergeToM4B -a <flac-file> -m <aax-file> -o <outfile>

Merging flac+aax -> m4b - Bulk mode
--mergeToM4B --bulk -a <flac-dir> -m <aax-dir> -o <outdir>

Joining mp3 -> m4b
--joinToM4B -a <input-dir> -o <outfile.m4b>
oder
--joinToM4B -a <file1> -a <file2> ... -a <fileN> -o <outfile.m4b>


splitToMP3
==========

Splitting flac+aax -> mp3
--splitToMP3 -a <flac-file> -m <aax-file> -o <output-dir>

Splitting m4b -> mp3
--splitToMP3 -a <m4b> -> -o <output-dir>


splitToM4A
==========

Splitting one m4a -> m4a
--splitToM4A -a <m4b> -> o <output-dir>

